name: minirox CI

on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - main
  schedule:
    - cron: "0 21 * * *"
  workflow_dispatch:

jobs:
  test:
    if: >-
      (
        (
          github.event_name == 'schedule'
          && github.repository == 'minirox/minirox'
        ) || (
            github.event_name != 'schedule'
            && !(
              contains(github.event.head_commit.message, '[ci skip]')
              || contains(github.event.head_commit.message, '[skip ci]')
            )
        )
      )
    runs-on: ubuntu-latest
    container: dolfinx/dolfinx
    strategy:
      matrix:
        petsc_arch: [real, complex]
      fail-fast: false
    steps:
      - uses: actions/checkout@v2
      - name: Set PETSc scalar type
        run: |
          . /usr/local/bin/dolfinx-${{ matrix.petsc_arch }}-mode
          echo "PETSC_ARCH=$PETSC_ARCH" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH" >> $GITHUB_ENV
          echo "PYTHONPATH=$PYTHONPATH" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=$PKG_CONFIG_PATH" >> $GITHUB_ENV
      - name: Install minirox
        run: |
          pip3 -q install --upgrade flake8==3.9.2 flake8-annotations flake8-docstrings flake8-isort flake8-quotes itkwidgets nbconvert numpy Pygments pytest pytest-cov pytest-flake8 pytest-xdist pyvista sympy
          PYVISTA_INIT=$(python3 -c 'import os, pyvista; print(os.path.join(os.path.dirname(pyvista.__file__), "__init__.py"))')
          sed -i "s/os.makedirs(USER_DATA_PATH)/os.makedirs(USER_DATA_PATH, exist_ok=True)/g" ${PYVISTA_INIT}
          python3 setup.py -q install
      - name: Run flake8 checks
        run: |
          pytest --flake8 -m flake8
          pytest --flake8 -m flake8 .github
      - name: Check for stray outputs, counts and metadata in ipynb files
        uses: ./.github/actions/jupyter/check_metadata
      - name: Run unit tests (serial)
        run: |
          pytest -n auto --cov-report term-missing:skip-covered --cov-report html:coverage --cov=minirox tests/unit
      - name: Run unit tests (parallel)
        run: |
          mpirun -n 2 pytest tests/unit
      - name: Run tutorials (serial)
        run: |
          pytest -n auto tutorials
      - name: Upload coverage report as an artifact
        uses: actions/upload-artifact@v2
        with:
          name: coverage
          path: coverage
